[{"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/index.js":"1","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/pages/Home.jsx":"2","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Loading/Loading.jsx":"3","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Enter/Enter.jsx":"4","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/SubjectCard/SubjectCard.jsx":"5","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/View/View.jsx":"6","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/ConfigModal/ConfigModal.jsx":"7","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Enter/View.jsx":"8","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/BoxplotSegmentation.jsx":"9","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Line/Midline.jsx":"10","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Table/TableParcellation.jsx":"11","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Radar/Radar.jsx":"12","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Table/TableSegmentation.jsx":"13","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/FolderSelector/FolderSelector.jsx":"14","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Question/Question.jsx":"15","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/BoxplotParcellation.jsx":"16","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Scatter/Scatter.jsx":"17","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/Boxplot.jsx":"18","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/InfoTool/InfoTool.jsx":"19"},{"size":762,"mtime":1678921529370,"results":"20","hashOfConfig":"21"},{"size":5814,"mtime":1679602266152,"results":"22","hashOfConfig":"21"},{"size":2129,"mtime":1678921285095,"results":"23","hashOfConfig":"21"},{"size":2025,"mtime":1678921291639,"results":"24","hashOfConfig":"21"},{"size":270,"mtime":1678388944799,"results":"25","hashOfConfig":"21"},{"size":7540,"mtime":1679340633318,"results":"26","hashOfConfig":"21"},{"size":2351,"mtime":1678391871647,"results":"27","hashOfConfig":"21"},{"size":4511,"mtime":1679600760273,"results":"28","hashOfConfig":"21"},{"size":1552,"mtime":1679339147670,"results":"29","hashOfConfig":"21"},{"size":3144,"mtime":1678391346754,"results":"30","hashOfConfig":"21"},{"size":6343,"mtime":1678391346758,"results":"31","hashOfConfig":"21"},{"size":2997,"mtime":1678391346754,"results":"32","hashOfConfig":"21"},{"size":5848,"mtime":1679354489429,"results":"33","hashOfConfig":"21"},{"size":2103,"mtime":1679600601646,"results":"34","hashOfConfig":"21"},{"size":447,"mtime":1678387824109,"results":"35","hashOfConfig":"21"},{"size":3621,"mtime":1679339264628,"results":"36","hashOfConfig":"21"},{"size":4965,"mtime":1679339460551,"results":"37","hashOfConfig":"21"},{"size":1057,"mtime":1679351513114,"results":"38","hashOfConfig":"21"},{"size":244,"mtime":1678391455069,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"kmzwy4",{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/index.js",["85"],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport Enter from \"./components/Enter/Enter\";\nimport Home from './pages/Home'\nimport Loading from './components/Loading/Loading'\nimport './styles/global.scss'\n\nimport {\n  createBrowserRouter,\n  RouterProvider,\n} from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <div className='container'> <Enter /></div>\n  },\n  {\n    path: \"/Loading\",\n    element: <div className='container'><Home /></div>\n  },\n  {\n    path: \"/Home\",\n    element: <div className='container'><Home /></div>\n  }\n])\n\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);",["86","87"],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/pages/Home.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Loading/Loading.jsx",["88"],"import React, { useState, useEffect } from 'react'\r\nimport './Loading.scss'\r\nimport { Dna } from  'react-loader-spinner'\r\n\r\nfunction Loading() {\r\n\r\n  const phrases = [\r\n    'The corpus callosum is the largest nerve fiber structure in the human brain. It contains about 200 million nerve fibers and weighs about 250 grams.',\r\n    'The corpus callosum was discovered by the Italian anatomist Luigi Rolando in 1809. He called it the \"cortical bridge\" because it connected the cortical areas of both cerebral hemispheres.',\r\n    \"The corpus callosum is responsible for allowing the transfer of sensory, motor and cognitive information between the cerebral hemispheres. That means it's important for functions like perception, language, learning, and memory.\",\r\n    'Some medical conditions, such as epilepsy, can be treated with surgery that cuts the corpus callosum. This is known as a callosotomy and is done to prevent epileptic activity from spreading from one hemisphere to the other.',\r\n    'Some research suggests that the size and shape of the corpus callosum may be related to gender differences. For example, studies indicate that the corpus callosum is proportionally larger in women than in men. Additionally, some research suggests that the corpus callosum may be more asymmetrical in men than in women.'\r\n  ]\r\n  \r\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setCurrentPhraseIndex(currentIndex => (currentIndex + 1) % phrases.length)\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [phrases])\r\n\r\n  return (\r\n    <div className='loader-container' id='loading-container'>\r\n        <Dna\r\n          visible={true}\r\n          height=\"80\"\r\n          width=\"80\"\r\n          ariaLabel=\"dna-loading\"\r\n          wrapperStyle={{}}\r\n          wrapperClass=\"dna-wrapper\"\r\n        />\r\n      <span className='wait-phase'>Please wait a moment while we prepare everything.</span>\r\n      <span>Did you know?</span> \r\n      <span className='phrases'>{phrases[currentPhraseIndex]}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Enter/Enter.jsx",["89"],"import React, { useState } from 'react'\r\nimport '../../styles/global.scss'\r\nimport { Dna } from  'react-loader-spinner'\r\nimport './Enter.scss'\r\nimport logo from '../../assets/inccsight.png'\r\n\r\n// Icones\r\nimport { TbHome2, TbQuestionCircle, TbBrandGithub, TbNews, TbSettings } from 'react-icons/tb'\r\nimport View from './View'\r\nimport Loading from '../Loading/Loading'\r\n\r\nfunction Enter() {\r\n\r\n    localStorage.setItem(\"folders\", JSON.stringify([]));\r\n    \r\n    const [page, setPage] = useState(\"Input\")\r\n\r\n    function handleClick(icon, name) {\r\n        const icons = document.querySelectorAll('.enter-icon');\r\n\r\n        icons.forEach((i) => {\r\n            if (i === icon) {\r\n                i.classList.add('active');\r\n            } else {\r\n                i.classList.remove('active');\r\n            }\r\n        });\r\n\r\n        setPage(name)\r\n    }\r\n\r\n    return (\r\n        <div className='enter-container'>\r\n            <div className='loading-screen' id='loading-screen'>\r\n                <Loading/>\r\n            </div>\r\n\r\n            <div className='enter-header'>\r\n\r\n                <img src={logo} className='icon-logo' alt='Logo do inCCsight' />\r\n                <span className='icon-text'>InCCsight</span>\r\n            </div>\r\n\r\n            <div className='enter-body'>\r\n\r\n                <div className='enter-left'>\r\n\r\n                    <TbHome2 className=\"enter-icon active\" onClick={(e) => handleClick(e.target, \"Input\")}/>\r\n                    <TbQuestionCircle className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Help\")}/>\r\n                    <TbBrandGithub className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Github\")}/>\r\n                    <TbNews className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"News\")}/>\r\n                    <TbSettings className=\"enter-icon\" onClick={(e) => handleClick(e.target, \"Settings\")}/>\r\n                    \r\n                </div>\r\n\r\n                <View type={page}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Enter","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/SubjectCard/SubjectCard.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/View/View.jsx",["90"],"import React from 'react'\r\n\r\n/* Componentes */\r\nimport TableSegmentation from '../../graphs/Table/TableSegmentation'\r\nimport TableParcellation from '../../graphs/Table/TableParcellation'\r\nimport BoxplotSegmentation from '../../graphs/Boxplot/BoxplotSegmentation'\r\nimport BoxplotParcellation from '../../graphs/Boxplot/BoxplotParcellation'\r\nimport Scatter from '../../graphs/Scatter/Scatter'\r\nimport Midline from '../../graphs/Line/Midline'\r\n\r\n/* Icones */\r\nimport {AiOutlineClose} from 'react-icons/ai'\r\n\r\nimport '../../styles/home.scss'\r\nimport Radar from '../../graphs/Radar/Radar'\r\n\r\nimport cc from '../../assets/images/ccimage.PNG'\r\n\r\nfunction View(props) {\r\n\r\n    function closeSelect(){\r\n        let subjectPainel = document.querySelector(\"#subjectPainel\");\r\n        subjectPainel.style.display = \"none\"\r\n    }\r\n\r\n\r\n    let data = props.data\r\n\r\n    if(props.view === \"2D\"){\r\n        return (\r\n            <div className='view-container' id=\"main-area\">\r\n                            \r\n                <div className='subject-select' id=\"subjectPainel\">      \r\n                    \r\n                    <div className='subject-image'>\r\n                        <span className='subject-name'>{data[0][\"Id\"]}</span>\r\n                        \r\n                        <div className='image'>\r\n                            <span className='msg-image'>Image upload will be added in next release</span>\r\n                        </div>\r\n                        \r\n                        <div className='image-prompts'>\r\n                            <div className='image-inputs'>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Segm. Method</label>\r\n                                    <select>\r\n                                        <option value=\"\">Watershed</option>\r\n                                        <option value=\"\">ROQS</option>\r\n                                        <option value=\"\">SantaRosa</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Scalar</label>\r\n                                    <select>\r\n                                        <option value=\"wFA\">wFA</option>\r\n                                        <option value=\"FA\">FA</option>\r\n                                        <option value=\"MD\">MD</option>\r\n                                        <option value=\"RD\">RD</option>\r\n                                        <option value=\"AD\">AD</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n    \r\n                            </div>\r\n    \r\n                            <div className='image-buttons'>\r\n                                <button className='btn-remove'>Remove</button>\r\n                            </div>\r\n    \r\n    \r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className='subject-tables'>\r\n                        <TableSegmentation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"2D\"/>\r\n                        <TableParcellation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"2D\"/>\r\n                    </div>\r\n                    \r\n                    <AiOutlineClose className='close-icon' onClick={closeSelect}/>\r\n    \r\n                </div>\r\n    \r\n                <div className='area-view'>\r\n                    \r\n    \r\n                    <div className='area-table'>\r\n                        <TableSegmentation data={data} type=\"2D\"/>\r\n                        <TableParcellation data={data} type=\"2D\"/>\r\n                    </div>\r\n                        \r\n                    <div className='area-boxplot'>\r\n                        <BoxplotSegmentation data={data} />\r\n                        <BoxplotParcellation data={data} />\r\n                    </div>\r\n    \r\n                    <div className='area-scatter'>\r\n                        <Scatter data={data}/>\r\n                    </div>\r\n    \r\n                    <div className='area-midline'>\r\n                        <Midline data={data}/>\r\n                        <Radar data={data}/>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    } else if(props.view === \"3D\"){\r\n        return(\r\n            <div className='view-container' id=\"main-area\">\r\n                \r\n                <div className='subject-select' id=\"subjectPainel\">      \r\n                    \r\n                    <div className='subject-image'>\r\n                        <span className='subject-name'>3D: {data[0][\"Id\"]}</span>\r\n                        \r\n                        <div className='image'>\r\n                            <span className='msg-image'>Image upload will be added in next release</span>\r\n                        </div>\r\n                        \r\n                        <div className='image-prompts'>\r\n                            <div className='image-inputs'>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Segm. Method</label>\r\n                                    <select>\r\n                                        <option value=\"\">Watershed</option>\r\n                                        <option value=\"\">ROQS</option>\r\n                                        <option value=\"\">SantaRosa</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n                                <div className='input-group'>\r\n                                    <label>Scalar</label>\r\n                                    <select>\r\n                                        <option value=\"wFA\">wFA</option>\r\n                                        <option value=\"FA\">FA</option>\r\n                                        <option value=\"MD\">MD</option>\r\n                                        <option value=\"RD\">RD</option>\r\n                                        <option value=\"AD\">AD</option>\r\n                                    </select>\r\n                                </div>\r\n    \r\n    \r\n                            </div>\r\n    \r\n                            <div className='image-buttons'>\r\n                                <button className='btn-3d' onClick={window.viewBrain}>3D Brain View</button>\r\n                                <button className='btn-3d' onClick={window.viewSegmentation}>3D CC View</button>\r\n                                <button className='btn-remove'>Remove</button>\r\n                            </div>\r\n    \r\n    \r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className='subject-tables'>\r\n                        <TableSegmentation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"3D\"/>\r\n                        <TableParcellation data={data} bg_color=\"#1F2C56\" color=\"white\" type=\"3D\"/>\r\n                    </div>\r\n                    \r\n                    <AiOutlineClose className='close-icon' onClick={closeSelect}/>\r\n    \r\n                </div>\r\n    \r\n                <div className='area-view'>\r\n                    \r\n    \r\n                    <div className='area-table'>\r\n                        <TableSegmentation data={data} type=\"3D\"/>\r\n                        <TableParcellation data={data} type=\"3D\"/>\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default View","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/ConfigModal/ConfigModal.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Enter/View.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/BoxplotSegmentation.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Line/Midline.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Table/TableParcellation.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Radar/Radar.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Table/TableSegmentation.jsx",["91","92","93","94"],"import React, {useState} from 'react'\r\nimport Plot from 'react-plotly.js'\r\nimport InfoTool from '../../components/InfoTool/InfoTool'\r\nimport './TableSegmentation.scss'\r\n\r\nimport { TbEyeFilled, TbEyeOff } from 'react-icons/tb'\r\n\r\nfunction getMeanValues(subjects, method, scalar){\r\n    let value = 0\r\n    subjects.map((subject) => {\r\n        return(\r\n            value += subject[method][scalar]\r\n        )\r\n    })\r\n\r\n    value /= (subjects.length);\r\n    return value.toFixed(6)\r\n}\r\n\r\nfunction TableSegmentation(props) {\r\n\r\n    let [view, setView] = useState(\"hide\")\r\n    let [size, setSize] = useState(130)\r\n    let [iconEye, setIconEye] = useState(<TbEyeFilled />)\r\n\r\n    function changeShowSegmentation(type) {\r\n        let value = document.querySelector(\"#showView2D\").value\r\n        console.log(value);\r\n    }\r\n\r\n    function teste(){\r\n        if(view == \"hide\"){\r\n            setView(\"show\")\r\n            setIconEye(<TbEyeOff />)\r\n        } else{\r\n            setView(\"hide\")\r\n            setIconEye(<TbEyeFilled />)\r\n        }\r\n    }\r\n\r\n        //if(view === \"show\"){\r\n        //    setSize(160)\r\n        //} else{\r\n        //    setSize(130)\r\n        //}\r\n\r\n    /* Remover depois */\r\n    let joany = [0.6556650233259003, 0.248837988995943, 0.0010308019022138776, 0.0004797977367285885, 0.0006192081277246568, 0.0005655540233389842, 0.0018539894511923193, 0.0004405055082694843]\r\n\r\n\r\n    let headers = []\r\n    /* Selecionando os dados */\r\n    let subjects = props.data\r\n    if(view === \"show\"){\r\n        headers = [\"Method\", \"FA\", \"FA StdDev\",\"MD\", \"MD StdDev\", \"RD\", \"RD StdDev\", \"AD\", \"AD StdDev\"]\r\n    } else if(view === \"hide\"){\r\n        headers = [\"Method\", \"FA\", \"MD\", \"RD\", \"AD\"]\r\n    }\r\n\r\n    let cols = [[\"ROQS\", \"Watershed-Based\", \"CNN-Based\"]]\r\n\r\n    for(let i = 1; i !== headers.length; i++){\r\n        let v1 = getMeanValues(subjects, \"ROQS_scalar\", headers[i])\r\n        let v2 = getMeanValues(subjects, \"Watershed_scalar\", headers[i])\r\n        let v3 = getMeanValues(subjects, \"santarosa_scalars\", headers[i])\r\n        cols.push([v1, v2, v3])\r\n    }\r\n    \r\n    /* Ajustes da tabela */\r\n    \r\n    let layout = {width: \"50%\", height: size, margin: {t: 10, b: 0, l: 10, r: 10}, paper_bgcolor: props.bg_color}\r\n\r\n    if(props.type === \"2D\"){\r\n\r\n        let data = [{\r\n            type: \"table\",\r\n            header: {\r\n                values: headers,\r\n                align: [\"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                fill: {color: \"grey\"},\r\n                font: {family: \"Arial\", size: 14, color: \"white\"}\r\n            },\r\n            cells: {\r\n                values: cols,\r\n                height: 30,\r\n                align: [\"center\", \"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n            }\r\n        }]\r\n\r\n        return(\r\n\r\n            <div className='table-field'>\r\n                    \r\n                <div className='table-row'>\r\n                    <span className={`table-title ${props.color}`}>Segmentation Data <InfoTool text=\"Comparison of the mean values ​​obtained by segmentation in each method.\"/></span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n            \r\n                <div className='options-row'>  \r\n            \r\n                    <div className='select-group'>\r\n                        <label className={props.color}>Std. Dev: </label>\r\n\r\n                        <button onClick={teste} className=\"btn-icon\">{iconEye}</button>\r\n\r\n                    </div>\r\n            \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    } else if(props.type === \"3D\"){\r\n\r\n        let joany = [0.6556650233259003, 0.248837988995943, 0.0010308019022138776, 0.0004797977367285885, 0.0006192081277246568, 0.0005655540233389842, 0.0018539894511923193, 0.0004405055082694843]\r\n        let cols = [[\"CNN-Based\"]]\r\n\r\n        for(let i = 1; i !== headers.length; i++){\r\n            let v1 = getMeanValues(subjects, \"santarosa_scalars\", headers[i])\r\n            cols.push([v1])\r\n        }\r\n\r\n        let data = [{\r\n            type: \"table\",\r\n            header: {\r\n                values: headers,\r\n                align: [\"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                fill: {color: \"grey\"},\r\n                font: {family: \"Arial\", size: 14, color: \"white\"}\r\n            },\r\n            cells: {\r\n                values: cols,\r\n                height: 30,\r\n                align: [\"center\", \"center\"],\r\n                line: {width: 1, color: 'black'},\r\n                font: {family: \"Arial\", size: 12, color: \"black\"}    \r\n            }\r\n        }]\r\n\r\n        return(\r\n\r\n            <div className='table-field'>\r\n                    \r\n                <div className='table-row'>\r\n                    <span className={`table-title ${props.color}`}>Segmentation Data <InfoTool text=\"Comparison of the mean values ​​obtained by segmentation in each method.\"/></span>\r\n                    <button className='btn-export'>Export</button>\r\n                </div>\r\n    \r\n                <Plot data={data} layout={layout}/>\r\n            \r\n                <div className='options-row'>  \r\n            \r\n                    <div className='select-group'>\r\n                        <label className={props.color}>Std. Dev: </label>\r\n                        <select onChange={() => {changeShowSegmentation(\"3D\")}} id=\"show\">\r\n                            <option value=\"hide\">Hide</option>\r\n                            <option value=\"show\">Show</option>\r\n                        </select>\r\n                    </div>\r\n            \r\n                </div>\r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TableSegmentation","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/FolderSelector/FolderSelector.jsx",["95","96"],"import React, { useState, useRef } from \"react\";\r\nimport './FolderSelector.scss'\r\nimport { TbFolder, TbChecks } from 'react-icons/tb'\r\n\r\nfunction FolderSelector(props) {\r\n    const [folderPath, setFolderPath] = useState([]);\r\n    \r\n    const inputRef = useRef(null);\r\n\r\n    function savePath(path){\r\n        let listPaths = JSON.parse(localStorage.getItem(\"folders\"))\r\n        listPaths.push(path)\r\n        let newList = JSON.stringify(listPaths)\r\n\r\n        localStorage.setItem(\"folders\", newList)\r\n    }\r\n\r\n    function handleFolderChange(event) {\r\n        \r\n        const selectedFolder = event.target.files[0].path;\r\n        console.log(event)\r\n        // let lastSlashIndex = selectedFolder.lastIndexOf(\"\\\\\");\r\n        let lastSlashIndex = selectedFolder.lastIndexOf(\"/\");\r\n        let penultimateSlashIndex = selectedFolder.lastIndexOf(\"/\", lastSlashIndex - 1);\r\n\r\n\r\n        let folderPath = selectedFolder.substring(0, penultimateSlashIndex);\r\n        console.log(folderPath)\r\n      \r\n        if (selectedFolder) {\r\n            setFolderPath(folderPath);\r\n            savePath(folderPath)\r\n        }\r\n    }\r\n\r\n    function handleFolderButtonClick() {\r\n        inputRef.current.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"folder-container\">\r\n            <input className=\"input-text\" placeholder=\"Ex: Control Group\" id={`folder-name-${props.id}`} required/>\r\n\r\n            <label className=\"input-icon\" htmlFor=\"folder-selector\">\r\n                <input\r\n                    type=\"file\"\r\n                    id={`folder-selector-${props.id}`}\r\n                    webkitdirectory=\"true\"\r\n                    onChange={handleFolderChange}\r\n                    ref={inputRef}\r\n                    style={{ display: \"none\" }}\r\n                />\r\n\r\n                <button type=\"button\" className=\"icon-button\" onClick={handleFolderButtonClick}>\r\n                    <TbFolder className=\"icon\"/>\r\n                    <span className=\"icon-text\">Click for select a folder</span>\r\n                </button>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FolderSelector;","/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/Question/Question.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/BoxplotParcellation.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Scatter/Scatter.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/graphs/Boxplot/Boxplot.jsx",[],"/home/jovi/Área de Trabalho/repositorios/inCCsightDev/src/components/InfoTool/InfoTool.jsx",[],{"ruleId":"97","severity":1,"message":"98","line":6,"column":8,"nodeType":"99","messageId":"100","endLine":6,"endColumn":15},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":7,"column":9,"nodeType":"107","endLine":13,"endColumn":4},{"ruleId":"97","severity":1,"message":"108","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":13},{"ruleId":"97","severity":1,"message":"109","line":17,"column":8,"nodeType":"99","messageId":"100","endLine":17,"endColumn":10},{"ruleId":"97","severity":1,"message":"110","line":23,"column":16,"nodeType":"99","messageId":"100","endLine":23,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":32,"column":17,"nodeType":"113","messageId":"114","endLine":32,"endColumn":19},{"ruleId":"97","severity":1,"message":"115","line":48,"column":9,"nodeType":"99","messageId":"100","endLine":48,"endColumn":14},{"ruleId":"97","severity":1,"message":"115","line":119,"column":13,"nodeType":"99","messageId":"100","endLine":119,"endColumn":18},{"ruleId":"97","severity":1,"message":"116","line":3,"column":20,"nodeType":"99","messageId":"100","endLine":3,"endColumn":28},{"ruleId":"97","severity":1,"message":"117","line":6,"column":12,"nodeType":"99","messageId":"100","endLine":6,"endColumn":22},"no-unused-vars","'Loading' is defined but never used.","Identifier","unusedVar","no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","The 'phrases' array makes the dependencies of useEffect Hook (at line 22) change on every render. To fix this, wrap the initialization of 'phrases' in its own useMemo() Hook.","VariableDeclarator","'Dna' is defined but never used.","'cc' is defined but never used.","'setSize' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'joany' is assigned a value but never used.","'TbChecks' is defined but never used.","'folderPath' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]